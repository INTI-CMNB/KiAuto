#!/usr/bin/env python3
"""Various pcbnew operations

This program runs eeschema and can:
1) Print PCB layers
2) Run the DRC
The process is graphical and very delicated.
"""

__author__ = 'Salvador E. Tropea'
__copyright__ = 'Copyright 2019-2020, INTI/Productize SPRL'
__credits__ = ['Salvador E. Tropea', 'Scott Bezek']
__license__ = 'Apache 2.0'
__email__ = 'salvador@inti.gob.ar'
__status__ = 'beta'

import sys
import os
import argparse
import atexit
import re
import shutil
from time import (asctime, localtime, sleep)
import subprocess
import gettext

# Look for the 'kicad_auto' module from where the script is running
script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.dirname(script_dir))
# Utils import
# Log functionality first
from kicad_auto import log
log.set_domain(os.path.splitext(os.path.basename(__file__))[0])
from kicad_auto.file_util import (
    load_filters,
    wait_for_file_created_by_process,
    apply_filters,
    errs, wrns,
)
from kicad_auto.misc import (REC_W, REC_H, __version__, NO_PCB, PCBNEW_CFG_PRESENT, WAIT_START, WRONG_LAYER_NAME,
                             WRONG_PCB_NAME, PCBNEW_ERROR, WRONG_ARGUMENTS)
from kicad_auto.ui_automation import (
    PopenContext,
    xdotool,
    wait_not_focused,
    wait_for_window,
    recorded_xvfb,
    clipboard_store,
    set_wait,
    wait_point
)

TITLE_CONFIRMATION = '^Confirmation$'
TITLE_ERROR = '^Error$'
TITLE_WARNING = '^Warning$'


def parse_drc(drc_file):
    with open(drc_file, 'r') as f:
        lines = f.read().splitlines()

    drc_errors = None
    unconnected_pads = None
    in_errs = False
    in_wrns = False

    for line in lines:
        m = re.search(r'^\*\* Found ([0-9]+) DRC errors \*\*$', line)
        if m:
            drc_errors = m.group(1)
            in_errs = True
            continue
        m = re.search(r'^\*\* Found ([0-9]+) unconnected pads \*\*$', line)
        if m:
            unconnected_pads = m.group(1)
            in_errs = False
            in_wrns = True
            continue
        m = re.search(r'^\*\* End of Report \*\*$', line)
        if m:
            break
        if in_errs:
            m = re.search(r'^ErrType\((\d+)\): (.*)', line)
            if m:
                errs.append('({}) {}'.format(m.group(1), m.group(2)))
                continue
            if len(line) > 4 and len(errs) > 0:
                errs.append(errs.pop()+'\n'+line)
                continue
        if in_wrns:
            m = re.search(r'^ErrType\((\d+)\): (.*)', line)
            if m:
                wrns.append('({}) {}'.format(m.group(1), m.group(2)))
                continue
            if len(line) > 4 and len(wrns) > 0:
                wrns.append(wrns.pop()+'\n'+line)
                continue

    return int(drc_errors), int(unconnected_pads)


def dismiss_already_running():
    # The "Confirmation" modal pops up if pcbnew is already running
    nf_title = TITLE_CONFIRMATION
    wait_for_window(nf_title, nf_title, 1)

    logger.info('Dismiss pcbnew already running')
    xdotool(['search', '--onlyvisible', '--name', nf_title, 'windowfocus'])
    xdotool(['key', 'Return'])


def dismiss_warning():  # pragma: no cover
    nf_title = TITLE_WARNING
    wait_for_window(nf_title, nf_title, 1)

    logger.error('Dismiss pcbnew warning, will fail')
    xdotool(['search', '--onlyvisible', '--name', nf_title, 'windowfocus'])
    xdotool(['key', 'Return'])


def dismiss_error():
    nf_title = TITLE_ERROR
    wait_for_window(nf_title, nf_title, 1)

    logger.debug('Dismiss pcbnew error')
    xdotool(['search', '--onlyvisible', '--name', nf_title, 'windowfocus'])
    logger.debug('Found, sending Return')
    xdotool(['key', 'Return'])


def wait_pcbnew(time=10, others=None):
    return wait_for_window('Main pcbnew window', r'Pcbnew', time, others=others)


def wait_pcbew_start():
    failed_focuse = False
    other = None
    try:
        wait_pcbnew(args.wait_start, [TITLE_CONFIRMATION, TITLE_WARNING, TITLE_ERROR])
    except RuntimeError:  # pragma: no cover
        logger.debug('Time-out waiting for pcbnew, will retry')
        failed_focuse = True
        pass
    except ValueError as err:
        other = str(err)
        logger.debug('Found "'+other+'" window instead of pcbnew')
        failed_focuse = True
        pass
    if failed_focuse:
        wait_point()
        if other == TITLE_ERROR:
            dismiss_error()
            logger.error('pcbnew reported an error')
            exit(PCBNEW_ERROR)
        if other == TITLE_CONFIRMATION:
            dismiss_already_running()
        if other == TITLE_WARNING:  # pragma: no cover
            dismiss_warning()
        try:
            wait_pcbnew(5)
        except RuntimeError:  # pragma: no cover
            logger.error('Time-out waiting for pcbnew, giving up')
            raise


def exit_pcbnew():
    # Wait until the dialog is closed, useful when more than one file are created
    id = wait_pcbnew(10)

    logger.info('Exiting pcbnew')
    wait_point()
    xdotool(['key', 'ctrl+q'])
    try:
        wait_not_focused(id[0], 5)
    except RuntimeError:  # pragma: no cover
        logger.debug('PCBnew not exiting, will retry')
        pass
    # Dismiss any dialog. I.e. failed to write the project
    # Note: if we modified the PCB KiCad will ask for save using a broken dialog.
    #       It doesn't have a name and only gets focus with a WM.
    logger.info('Retry pcbnew exit')
    wait_point()
    xdotool(['key', 'Return', 'ctrl+q'])
    try:
        wait_not_focused(id[0], 5)
    except RuntimeError:  # pragma: no cover
        logger.debug('PCBnew not exiting, will kill')
        pass
    # If we failed to exit we will kill it anyways
    wait_point()


def print_layers(pcb_file, output_dir, output_filename, record=True, fill_zones=False):

    os.makedirs(output_dir, exist_ok=True)

    print_output_file = os.path.join(os.path.abspath(output_dir), output_filename)
    if os.path.exists(print_output_file):
        os.remove(print_output_file)

    xvfb_kwargs = {'width': args.rec_width, 'height': args.rec_height, 'colordepth': 24, }

    with recorded_xvfb(output_dir if record else None, 'pcbnew_print_layers_screencast.ogv',
                       args.start_x11vnc, use_wm, **xvfb_kwargs):
        with PopenContext(['pcbnew', pcb_file], stderr=subprocess.DEVNULL, close_fds=True) as pcbnew_proc:

            clipboard_store(print_output_file)

            wait_pcbew_start()

            if fill_zones:
                logger.info('Fill zones')
                wait_point()
                xdotool(['key', 'b'])
                # Wait for complation
                sleep(1)

            logger.info('Open File->Print')
            wait_point()
            xdotool(['key', 'alt+f', 'p'])

            retry = False
            try:
                id = wait_for_window('Print dialog', 'Print')
            except RuntimeError:  # pragma: no cover
                # Perhaps the fill took too muchm try again
                retry = True

            if retry:  # pragma: no cover
                # Excluded from coverage, only happends under conditions hard to reproduce
                logger.info('Open File->Print (retrying)')
                wait_point()
                xdotool(['key', 'alt+f', 'p'])
                id = wait_for_window('Print dialog', 'Print')

            wait_point()
            # The "color" option is selected, send enough Tabs to go to the Print button
            keys = ['key', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab',
                    # When using a WM we have chances to be 1 tab before "color" (don't know why)
                    # Here we add this Tab, but then we move to the right in case it wasn't necessary
                    'Tab', 'Right',
                    'Return']
            xdotool(keys)

            id2 = wait_for_window('Printer dialog', '^(Print|%s)$' % print_dlg_name, skip_id=id[0])
            wait_point()
            # List of printers
            xdotool(['key', 'Tab',
                     # Go up to the top
                     'Home',
                     # Output file name
                     'Tab',
                     # Open dialog
                     'Return'])
            id_sel_f = wait_for_window('Select a filename', '(Select a filename|%s)' % select_a_filename, 2)
            logger.info('Pasting output dir')
            wait_point()
            xdotool(['key',
                     # Select all
                     'ctrl+a',
                     # Paste
                     'ctrl+v',
                     # Select this name
                     'Return'])
            # Back to print
            wait_not_focused(id_sel_f[0])
            wait_for_window('Printer dialog', '^(Print|%s)$' % print_dlg_name, skip_id=id[0])
            wait_point()
            xdotool(['key',
                     # Format options
                     'Tab',
                     # Be sure we are at left (PDF)
                     'Left', 'Left', 'Left',
                     # Print it
                     'Return'])

            wait_for_file_created_by_process(pcbnew_proc.pid, print_output_file)

            wait_not_focused(id2[1])
            id = wait_for_window('Print dialog', 'Print')
            wait_point()
            # Close button
            xdotool(['key', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Tab', 'Return'])

            wait_not_focused(id2[0])
            exit_pcbnew()
            pcbnew_proc.terminate()

    return print_output_file


def run_drc(pcb_file, output_dir, record=True, save=False):

    os.makedirs(output_dir, exist_ok=True)

    drc_output_file = os.path.join(os.path.abspath(output_dir), args.output_name[0])
    if os.path.exists(drc_output_file):
        os.remove(drc_output_file)

    xvfb_kwargs = {'width': args.rec_width, 'height': args.rec_height, 'colordepth': 24, }

    with recorded_xvfb(output_dir if record else None, 'pcbnew_run_drc_screencast.ogv',
                       args.start_x11vnc, use_wm, **xvfb_kwargs):
        with PopenContext(['pcbnew', pcb_file], stderr=subprocess.DEVNULL, close_fds=True) as pcbnew_proc:

            clipboard_store(drc_output_file)

            wait_pcbew_start()

            logger.info('Open Inspect->DRC')
            wait_point()
            xdotool(['key', 'alt+i', 'd'])

            wait_for_window('DRC modal window', 'DRC Control')
            # Note: Refill zones on DRC gets saved in ~/.config/kicad/pcbnew as RefillZonesBeforeDrc
            # The space here is to enable the report of all errors for tracks
            logger.info('Enable reporting all errors for tracks')
            wait_point()
            xdotool(['key', 'Tab', 'Tab', 'Tab', 'Tab', 'space', 'Tab', 'Tab', 'Tab', 'Tab'])
            logger.info('Pasting output dir')
            wait_point()
            xdotool(['key', 'ctrl+v', 'Return'])

            wait_for_window('Report completed dialog', 'Disk File Report Completed')
            wait_point()
            xdotool(['key', 'Return'])
            wait_for_window('DRC modal window', 'DRC Control')

            logger.info('Closing the DRC dialog')
            wait_point()
            xdotool(['key', 'shift+Tab', 'Return'])
            wait_pcbnew()

            if save:
                logger.info('Saving PCB')
                wait_point()
                os.rename(pcb_file, pcb_file + '-bak')
                xdotool(['key', 'ctrl+s'])
                logger.info('Wait for PCB file creation')
                wait_point()
                wait_for_file_created_by_process(pcbnew_proc.pid, os.path.realpath(pcb_file))

            exit_pcbnew()
            pcbnew_proc.terminate()

    return drc_output_file


def load_layers(kicad_pcb_file):
    layer_names = ['-']*50
    pcb_file = open(kicad_pcb_file, "r")
    collect_layers = False
    for line in pcb_file:
        if collect_layers:
            z = re.match(r'\s+\((\d+)\s+(\S+)', line)
            if z:
                res = z.groups()
                # print(res[1]+'->'+res[0])
                layer_names[int(res[0])] = res[1]
            else:
                if re.search(r'^\s+\)$', line):
                    collect_layers = False
                    break
        else:
            if re.search(r'\s+\(layers', line):
                collect_layers = True
    pcb_file.close()
    return layer_names


class ListLayers(argparse.Action):
    """A special action class to list the PCB layers and exit"""
    def __call__(self, parser, namespace, values, option_string):
        layer_names = load_layers(values[0])
        for layer in layer_names:
            if layer != '-':
                print(layer)
        parser.exit()  # exits the program with no more arg parsing and checking


# Restore the pcbnew configuration
def restore_config():
    if os.path.exists(old_config_file):
        os.remove(config_file)
        os.rename(old_config_file, config_file)


def list_errors():
    for err in errs:
        if err:
            logger.error(err)


def list_warnings():
    for wrn in wrns:
        if wrn:
            logger.warning(wrn)


pcb_size = -1
pcb_date = -1
pcb_file = None


def restore_pcb():
    if pcb_file and pcb_size >= 0 and pcb_date >= 0:
        cur_date = os.path.getmtime(pcb_file)
        if cur_date != pcb_date:
            logger.debug('Current pcb date: {} (!={}), trying to restore it'.
                         format(asctime(localtime(cur_date)), asctime(localtime(pcb_date))))
            bkp = pcb_file+'-bak'
            if os.path.isfile(bkp):
                bkp_size = os.path.getsize(bkp)
                if bkp_size == pcb_size:
                    os.remove(pcb_file)
                    os.rename(bkp, pcb_file)
                    logger.debug('Moved {} -> {}'.format(bkp, pcb_file))
                else:  # pragma: no cover
                    logger.error('Corrupted back-up file! (size = {})'.format(bkp_size))
            else:  # pragma: no cover
                logger.error('No back-up available!')


def memorize_pcb(file):
    global pcb_size
    global pcb_date
    global pcb_file
    pcb_size = os.path.getsize(file)
    pcb_date = os.path.getmtime(file)
    pcb_file = file
    logger.debug('Current pcb ({}) size: {} date: {}'.
                 format(pcb_file, pcb_size, asctime(localtime(pcb_date))))
    atexit.register(restore_pcb)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='KiCad PCB automation')
    subparsers = parser.add_subparsers(help='Command:', dest='command')

    # short commands: rmsvVw
    parser.add_argument('--record', '-r', help='Record the UI automation', action='store_true')
    parser.add_argument('--rec_width', help='Record width ['+str(REC_W)+']', type=int, default=REC_W)
    parser.add_argument('--rec_height', help='Record height ['+str(REC_H)+']', type=int, default=REC_H)
    parser.add_argument('--start_x11vnc', '-s', help='Start x11vnc (debug)', action='store_true')
    parser.add_argument('--use_wm', '-m', help='Use a window manager (fluxbox)', action='store_true')
    parser.add_argument('--verbose', '-v', action='count', default=0)
    parser.add_argument('--version', '-V', action='version', version='%(prog)s '+__version__+' - ' +
                        __copyright__+' - License: '+__license__)
    parser.add_argument('--wait_key', '-w', help='Wait for key to advance (debug)', action='store_true')
    parser.add_argument('--wait_start', help='Timeout to pcbnew start ['+str(WAIT_START)+']', type=int, default=WAIT_START)

    export_parser = subparsers.add_parser('export', help='Export PCB layers')
    export_parser.add_argument('--fill_zones', '-f', help='Fill all zones before printing', action='store_true')
    export_parser.add_argument('--list', '-l', help='Print a list of layers in LIST PCB and exit', nargs=1, action=ListLayers)
    export_parser.add_argument('--output_name', '-o', nargs=1, help='Name of the output file', default=['printed.pdf'])
    export_parser.add_argument('kicad_pcb_file', help='KiCad PCB file')
    export_parser.add_argument('output_dir', help='Output directory')
    export_parser.add_argument('layers', nargs='+', help='Which layers to include')

    # short commands: ios
    drc_parser = subparsers.add_parser('run_drc', help='Run Design Rules Checker on a PCB')
    drc_parser.add_argument('--errors_filter', '-f', nargs=1, help='File with filters to exclude errors')
    drc_parser.add_argument('--ignore_unconnected', '-i', help='Ignore unconnected paths', action='store_true')
    drc_parser.add_argument('--output_name', '-o', nargs=1, help='Name of the output file', default=['drc_result.rpt'])
    drc_parser.add_argument('--save', '-s', help='Save after DRC (updating filled zones)', action='store_true')
    drc_parser.add_argument('kicad_pcb_file', help='KiCad PCB file')
    drc_parser.add_argument('output_dir', help='Output directory')

    args = parser.parse_args()

    # Create a logger with the specified verbosity
    logger = log.init(args.verbose)

    if args.command is None:
        logger.error('No command selected')
        parser.print_help()
        exit(WRONG_ARGUMENTS)

    # Used to debug the GUI steps
    set_wait(args.wait_key)
    # Use a Window Manager, dialogs behaves in a different way
    use_wm = args.use_wm

    # Get local versions for the GTK window names
    gettext.textdomain('gtk30')
    select_a_filename = gettext.gettext('Select a filename')
    print_dlg_name = gettext.gettext('Print')
    logger.debug('Select a filename -> '+select_a_filename)
    logger.debug('Print -> '+print_dlg_name)

    # Force english + UTF-8
    os.environ['LANG'] = 'C.UTF-8'

    # Check the file exists
    if not os.path.isfile(args.kicad_pcb_file):
        logger.error(args.kicad_pcb_file+' does not exist')
        exit(NO_PCB)

    # If we pass a name without extension KiCad will try to create a ".kicad_pcb"
    if os.path.splitext(args.kicad_pcb_file)[1] == '':
        logger.error('PCB files must use kicad_pcb extension')
        exit(WRONG_PCB_NAME)

    will_save = args.command == 'run_drc' and args.save
    if not will_save:
        memorize_pcb(args.kicad_pcb_file)

    if args.command == 'export':
        # Read the layer names from the PCB
        layer_names = load_layers(args.kicad_pcb_file)

    if args.command == 'run_drc' and args.errors_filter:
        load_filters(args.errors_filter[0])

    # Back-up the current pcbnew configuration
    kicad_cfg_dir = os.path.join(os.environ['HOME'], '.config/kicad')
    if not os.path.isdir(kicad_cfg_dir):
        logger.debug('Creating KiCad config dir')
        os.makedirs(kicad_cfg_dir, exist_ok=True)
    config_file = os.path.join(kicad_cfg_dir, 'pcbnew')
    old_config_file = config_file + '.pre_script'
    logger.debug('PCBnew config: '+config_file)
    # If we have an old back-up ask for the user to solve it
    if os.path.isfile(old_config_file):
        logger.error('PCBnew config back-up found (%s)', old_config_file)
        logger.error('It could contain your pcbnew configuration, rename it to %s or discard it.', config_file)
        exit(PCBNEW_CFG_PRESENT)
    if os.path.isfile(config_file):
        logger.debug('Moving current config to '+old_config_file)
        os.rename(config_file, old_config_file)
        atexit.register(restore_config)

    # Create a suitable configuration
    text_file = open(config_file, "w")
    text_file.write('canvas_type=2\n')
    text_file.write('RefillZonesBeforeDrc=1\n')
    text_file.write('PcbFrameFirstRunShown=1\n')
    text_file.write('DrcTrackToZoneTest=1\n')
    if args.command == 'export':
        # Color
        text_file.write('PrintMonochrome=0\n')
        # Include frame
        text_file.write('PrintPageFrame=1\n')
        # Real drill marks
        text_file.write('PrintPadsDrillOpt=2\n')
        # Only one file
        text_file.write('PrintSinglePage=1\n')
        # Mark which layers are requested
        used_layers = [0]*50
        for layer in args.layers:
            try:
                # Support for kiplot inner layers
                if layer.startswith("Inner"):
                    m = re.match(r"^Inner\.([0-9]+)$", layer)
                    if not m:
                        logger.error('Malformed inner layer name: '+layer+', use Inner.N')
                        sys.exit(WRONG_LAYER_NAME)
                    layer_n = int(m.group(1))
                    if layer_n > 49 or layer_names[layer_n] == '-':
                        logger.error(layer+" isn't a valid layer")
                        sys.exit(WRONG_LAYER_NAME)
                    used_layers[layer_n] = 1
                else:
                    used_layers[layer_names.index(layer)] = 1
            except ValueError:
                logger.error('Unknown layer '+layer)
                sys.exit(WRONG_LAYER_NAME)
        # List all posible layers, indicating which ones are requested
        for x in range(0, 50):
            text_file.write('PlotLayer_%d=%d\n' % (x, used_layers[x]))
    text_file.close()

    # Make sure the user has fp-lib-table
    user_lib_table = os.path.join(kicad_cfg_dir, 'fp-lib-table')
    if not os.path.isfile(user_lib_table):
        logger.debug('Missing default fp-lib-table')
        system_lib_table = '/usr/share/kicad/template/fp-lib-table'
        if os.path.isfile(system_lib_table):
            shutil.copy2(system_lib_table, user_lib_table)
        else:  # pragma: no cover
            logger.warning('Missing default system footprint table '+system_lib_table+' KiCad will most probably fail')

    error_level = 0
    if args.command == 'export':
        print_layers(args.kicad_pcb_file, args.output_dir, args.output_name[0], args.record, args.fill_zones)
    else:  # run_drc
        drc_errors, unconnected_pads = parse_drc(run_drc(args.kicad_pcb_file, args.output_dir, args.record, args.save))
        logger.debug('Found {} DRC errors and {} unconnected pads'.format(drc_errors, unconnected_pads))

        skip_err, skip_unc = apply_filters('DRC error/s', 'unconnected pad/s')
        drc_errors = drc_errors-skip_err
        unconnected_pads = unconnected_pads-skip_unc
        if drc_errors == 0 and unconnected_pads == 0:
            logger.info('No errors')
        else:
            logger.error('Found {} DRC errors and {} unconnected pads'.format(drc_errors, unconnected_pads))
            list_errors()
            if args.ignore_unconnected:
                unconnected_pads = 0
            else:
                list_warnings()
            error_level = -(drc_errors+unconnected_pads)

    # The following code is here only to make coverage tool properly meassure atexit code.
    if not will_save:
        atexit.unregister(restore_pcb)
        restore_pcb()
    atexit.unregister(restore_config)
    restore_config()
    exit(error_level)
